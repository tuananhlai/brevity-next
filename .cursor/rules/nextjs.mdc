---
description: 
globs: 
alwaysApply: false
---
---
description: Next.js with TypeScript and Tailwind UI best practices
globs: **/*.tsx, **/*.ts, src/**/*.ts, src/**/*.tsx
---

# Next.js Best Practices

## Project Structure

- Use the Page Router directory structure
- Place shared components in `src/components` directory
- Place feature-specific components in their own module within `src/features`.
- Place utilities and helpers in `src/utils` directory
- Use lowercase with dashes for directories (e.g., `components/auth-wizard`)
- Use CSS variables located within the CSS files at `src/styles`.

## Components

- Use dynamic loading for non-critical components
- Implement proper error boundaries

## Performance

- Optimize images: Use WebP format, size data, lazy loading
- Minimize use of 'useEffect' and 'setState'
- Use dynamic loading for non-critical components
- Implement proper caching strategies

## Data Fetching

- Implement proper error handling for data fetching
- Use appropriate caching strategies
- Handle loading and error states appropriately

## Routing

- Use the Pages Router conventions
- Implement proper loading and error states for routes
- Use dynamic routes appropriately

## Forms and Validation

- Use Zod for form validation
- Implement proper server-side validation
- Handle form errors appropriately
- Show loading states during form submission

## State Management

- Use React Context sparingly
- Implement proper loading states
